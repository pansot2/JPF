+classpath=${user.home}/Netbeansprojects/JPF/IntermittentFaultsTest/target/classes
+listener=gov.nasa.jpf.listener.MyListener

target=gr.uop.intermittent.faults.intermittentfaultstest.Test

#+symbolic.method= <gr.uop.intermittent.faults.intermittentfaultstest.utils.CacheStore.cacheStore(sym#con),gr.uop.intermittent.faults.intermittentfaultstest.utils.Store.CacheStore(sym#con)>
	

#IGNORE.CLINIT=true 
#SHOW.PROGRESS=false 
#SHOW.STATE.GENERATION=false 
#SHOW.DETAILED.STATE.GENERATION=false 
#stop_time=5000

# listener to print information (PCs, test cases) about symbolic run
	
#listener = gov.nasa.jpf.symbc.SymbolicListener

# The following JPF options are usually used for SPF as well:
	
# no state matching

+vm.storage.class=nil

# instruct jpf not to stop at first error

#+jpf.report.console.finished=
vm.sourcepath = C:/Users/Takis/Documents/NetBeansProjects/JPF/IntermittentFaultsTest/src/main/java
#jpf.print_exception_stack = true
vm.por = true
vm.por.field_boundaries = true
vm.por.field_boundaries.never = java.*,javax.*,sun.*,org.*
vm.por.field_boundaries.break = gr.uop.intermittent.faults.*
#vm.por.sync_detection = true
vm.por.fieldlockinfo.class=
vm.gc = true
vm.shared.sync_detection = true

vm.shared.never_break_fields=\
java.lang.Thread*.*,\
java.lang.System.*,\
java.lang.Runtime.*,\
java.lang.Boolean.*,\
java.lang.String.*,\
java.lang.*.TYPE,\
java.util.HashMap.EMPTY_TABLE,\
java.util.HashSet.PRESENT,\
java.util.concurrent.ThreadPoolExecutor*.*,\
java.util.concurrent.ThreadPoolExecutor*.*,\
java.util.concurrent.TimeUnit.*,\
java.util.concurrent.Exchanger.CANCEL,\
java.util.concurrent.Exchanger.NULL_ITEM,\
java.util.concurrent.Executors$DefaultThreadFactory.*,\
sun.misc.VM.*,\
sun.misc.SharedSecrets.*,\
sun.misc.Unsafe.theUnsafe,\
gov.nasa.jpf.util.test.TestJPF.*

vm.shared.break_on_exposure = true
vm.shared.skip_finals=true
vm.shared.skip_static_finals=false

#+vm.insn_factory.class=gov.nasa.jpf.symbc.SymbolicInstructionFactory
+vm.tree_output=false
+vm.path_output=true
+log.level=severe
+jpf.report.console.property_violation=error



cg.break_single_choice = false


# default BooleanChoiceGenerator sequence: do we start with 'false'
cg.boolean.false_first = true

# do we want java.util.Random. nextXX() enumerate choices, or just return a single value?
# (isn't implemented for all types yet)
cg.enumerate_random=false

# maximum number of processors returned by Runtime.availableProcessors(). If this is
# greater than 1, the call represents a ChoiceGenerator
cg.max_processors=4

#vm.por.sync_detection.threshold=1

# if this option is true, when thread is started, CG is not created
# but thread is added to the pool of threads for later scheduling
# (when accessing shared variables or when other threads finish)
cg.threads.break_start=false

# if this option is true, CG is not created when yield() (Thread API)
# is called
cg.threads.break_yield=true

# if this option is true, CG is not created when sleep() (Thread API)
# is called
cg.threads.break_sleep=true

# set if we shold also break on array instructions, e.g. to detect races
# for array elements. This is off by default because it can cause serious
# state explosion
cg.threads.break_arrays=false

+search.multiple_errors=false
#search.class = .search.heuristic.BFSHeuristic 
+search.depth_limit = 30

#+symbolic.min_int=-100

#+symbolic.max_int=100

#+symbolic.min_double=-100.0

#+symbolic.max_double=100.0

#+symbolic.debug=off

